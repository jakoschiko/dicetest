use std::marker::PhantomData;

use ::rng::Rng;
use ::gen::Params;

/// Trait for generating a single random value of type `T`.
pub trait GenOnce<T> {
    /// Consumes the generator and generates a random value using the given parameters.
    ///
    /// The `Rng` is the only source of the randomness. Besides that, the generation is
    /// derterministic.
    fn gen_once(self, &mut Rng, &Params) -> T;

    /// Creates a new `GenOnce` by mapping the generated values of `self`.
    ///
    /// The function `f` will be applied to the generated value of `self`. This function result
    /// is the generated value of the new `Gen`.
    fn map_once<U, F>(self, f: F) -> GenMapOnce<T, U, Self, F>
    where
        Self: Sized,
        F: FnOnce(T) -> U,
    {
        GenMapOnce {
            g: self,
            f,
            _t: PhantomData,
            _u: PhantomData,
        }
    }

    /// Creates a new `GenOnce` whose value is generated by the generated `GenOnce` of `self`.
    fn flatten_once<U>(self) -> GenFlattenOnce<U, T, Self>
    where
        Self: Sized,
        T: GenOnce<U>
    {
        GenFlattenOnce {
            ggt: self,
            _t: PhantomData,
            _gt: PhantomData,
        }
    }

    /// Creates a new `GenOnce` similiar to `GenOnce::map_once`, except that the mapping produces
    /// a `GenOnce`.
    ///
    /// The function `f` will be applied to the generated value of `self`. This function result
    /// ia a `GenOnce` that generate the value for the new `Gen`.
    ///
    /// It is semanticly equivalent to `self.map_once(f).flatten_once()`.
    fn flat_map_once<U, GU, F>(self, f: F) -> GenFlatMapOnce<T, U, Self, GU, F>
    where
        Self: Sized,
        GU: GenOnce<U>,
        F: FnOnce(T) -> GU,
    {
        GenFlatMapOnce {
            gt: self,
            f,
            _t: PhantomData,
            _u: PhantomData,
            _gu: PhantomData,
        }
    }

    /// Calls `GenOnce::gen_once` with random seed and default parameters. Useful for debugging the
    /// generator.
    fn sample_once(self) -> T
    where
        Self: Sized,
    {
        let mut rng = Rng::random();
        let params = Params::default();

        self.gen_once(&mut rng, &params)
    }
}

impl<T, F> GenOnce<T> for F
where
    F: FnOnce(&mut Rng, &Params) -> T,
{
    fn gen_once(self, rng: &mut Rng, params: &Params) -> T {
        self(rng, params)
    }
}

/// Default implementation for `GenOnce::map_once`.
pub struct GenMapOnce<T, U, G, F>
where
    G: GenOnce<T>,
    F: FnOnce(T) -> U,
{
    g: G,
    f: F,
    _t: PhantomData<T>,
    _u: PhantomData<U>,
}

impl<T, U, G, F> GenOnce<U> for GenMapOnce<T, U, G, F>
where
    G: GenOnce<T>,
    F: FnOnce(T) -> U,
{
    fn gen_once(self, rng: &mut Rng, params: &Params) -> U {
        let g = self.g;
        let f = self.f;

        let t = g.gen_once(rng, params);
        let u = f(t);

        u
    }
}

/// Default implementation for `GenOnce::flatten_once`.
pub struct GenFlattenOnce<T, GT, GGT>
where
    GT: GenOnce<T>,
    GGT: GenOnce<GT>,
{
    ggt: GGT,
    _t: PhantomData<T>,
    _gt: PhantomData<GT>,
}

impl<T, GT, GGT> GenOnce<T> for GenFlattenOnce<T, GT, GGT>
where
    GT: GenOnce<T>,
    GGT: GenOnce<GT>,
{
    fn gen_once(self, rng: &mut Rng, params: &Params) -> T {
        let ggt = self.ggt;

        let gt = ggt.gen_once(rng, params);
        let t = gt.gen_once(rng, params);

        t
    }
}

/// Default implementation for `GenOnce::flat_map_once`.
pub struct GenFlatMapOnce<T, U, GT, GU, F>
where
    GT: GenOnce<T>,
    GU: GenOnce<U>,
    F: FnOnce(T) -> GU,
{
    gt: GT,
    f: F,
    _t: PhantomData<T>,
    _u: PhantomData<U>,
    _gu: PhantomData<GU>,
}

impl<T, U, GT, GU, F> GenOnce<U> for GenFlatMapOnce<T, U, GT, GU, F>
where
    GT: GenOnce<T>,
    GU: GenOnce<U>,
    F: FnOnce(T) -> GU,
{
    fn gen_once(self, rng: &mut Rng, params: &Params) -> U {
        let gt = self.gt;
        let f = self.f;

        let t = gt.gen_once(rng, params);
        let gu = f(t);
        let u = gu.gen_once(rng, params);

        u
    }
}
