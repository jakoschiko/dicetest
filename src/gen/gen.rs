use ::rng::Rng;
use ::gen::{Params, GenOnce, adapters};

/// Trait for generating random values of type `T`.
pub trait Gen<T>: GenOnce<T> {
    /// Generates a random value using the given parameters.
    ///
    /// The `Rng` is the only source of the randomness. Besides that, the generation is
    /// derterministic.
    fn gen(&self, &mut Rng, &Params) -> T;

    /// Creates a new `Gen` by mapping the generated values of `self`.
    ///
    /// The function `f` will be applied to the generated values of `self`. These function results
    /// are the generated values of the new `Gen`.
    fn map<U, F>(self, f: F) -> adapters::Map<T, U, Self, F>
    where
        Self: Sized,
        F: Fn(T) -> U,
    {
        adapters::Map::new(self, f)
    }

    /// Creates a new `Gen` whose values are generated by the generated `Gen`s of `self`.
    fn flatten<U>(self) -> adapters::Flatten<U, T, Self>
    where
        Self: Sized,
        T: GenOnce<U>
    {
        adapters::Flatten::new(self)
    }

    /// Creates a new `Gen` similiar to `Gen::map`, except that the mapping produces `Gen`s.
    ///
    /// The function `f` will be applied to the generated values of `self`. These function results
    /// are `Gen`s that generates the values for the new `Gen`.
    ///
    /// It is semanticly equivalent to `self.map(f).flatten()`.
    fn flat_map<U, GU, F>(self, f: F) -> adapters::FlatMap<T, U, Self, GU, F>
    where
        Self: Sized,
        GU: GenOnce<U>,
        F: Fn(T) -> GU,
    {
        adapters::FlatMap::new(self, f)
    }

    /// Calls `Gen::gen` with random seed and default parameters. Useful for debugging the
    /// generator.
    fn sample(&self) -> T {
        let mut rng = Rng::random();
        let params = Params::default();

        self.gen(&mut rng, &params)
    }
}

impl<T, F> Gen<T> for F
where
    F: Fn(&mut Rng, &Params) -> T,
{
    fn gen(&self, rng: &mut Rng, params: &Params) -> T {
        self(rng, params)
    }
}
