use ::rng::Rng;
use ::gen::{Size, GenOnce};
use ::gen::adapters::{GenMap, GenFlatten, GenFlatMap, GenBoxed, GenRc, GenArc};

/// Trait for generating random values of type `T`.
///
/// `Gen` trait represents a subset of `GenOnce`. It mirrors all methods of `GenOnce` without
/// the suffix `_once`. These methods must behave in the same way. For example an implementation
/// of `Gen` must produce the same value with its methods `gen` and `gen_once` if they are called
/// with the same `Rng` and `Size`.
pub trait Gen<T>: GenOnce<T> {
    /// Generates a random value using.
    ///
    /// The `Rng` is the only source of the randomness. Besides that, the generation is
    /// derterministic.
    fn gen(&self, &mut Rng, Size) -> T;

    /// Creates a new `Gen` by mapping the generated values of `self`.
    ///
    /// The function `f` will be applied to the generated values of `self`. These function results
    /// are the generated values of the new `Gen`.
    fn map<U, F>(self, f: F) -> GenMap<T, U, Self, F>
    where
        Self: Sized,
        F: Fn(T) -> U,
    {
        GenMap::new(self, f)
    }

    /// Creates a new `Gen` whose values are generated by the generated `Gen`s of `self`.
    fn flatten<U>(self) -> GenFlatten<U, T, Self>
    where
        Self: Sized,
        T: GenOnce<U>
    {
        GenFlatten::new(self)
    }

    /// Creates a new `Gen` similiar to `Gen::map`, except that the mapping produces `Gen`s.
    ///
    /// The function `f` will be applied to the generated values of `self`. These function results
    /// are `Gen`s that generates the values for the new `Gen`.
    ///
    /// It is semanticly equivalent to `self.map(f).flatten()`.
    fn flat_map<U, GU, F>(self, f: F) -> GenFlatMap<T, U, Self, GU, F>
    where
        Self: Sized,
        GU: GenOnce<U>,
        F: Fn(T) -> GU,
    {
        GenFlatMap::new(self, f)
    }

    /// Wraps `self` into a `Box`.
    fn boxed(self) -> GenBoxed<T>
        where
        Self: Sized + 'static,
        T: 'static,
    {
        GenBoxed::new(self)
    }

    /// Wraps `self` into an `Rc`.
    fn rc(self) -> GenRc<T>
        where
        Self: Sized + 'static,
        T: 'static,
    {
        GenRc::new(self)
    }

    /// Wraps `self` into an `Arc`.
    fn arc(self) -> GenArc<T>
        where
        Self: Sized + 'static,
        T: 'static,
    {
        GenArc::new(self)
    }

    /// Calls `Gen::gen` with random seed and default parameters. Useful for debugging the
    /// generator.
    fn sample(&self) -> T {
        let mut rng = Rng::random();
        let size = Size::default();

        self.gen(&mut rng, size)
    }
}

impl<T, F> Gen<T> for F
where
    F: Fn(&mut Rng, Size) -> T,
{
    fn gen(&self, rng: &mut Rng, size: Size) -> T {
        self(rng, size)
    }
}
