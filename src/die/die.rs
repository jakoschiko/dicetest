use crate::die::adapters::{ArcDie, BoxedDie, FlatMapDie, FlattenDie, MapDie, RcDie};
use crate::die::{DieOnce, Fate, Limit, Prng};

/// Trait for generating preudorandom values of type `T`.
///
/// The `Die` trait represents a subset of `DieOnce`. It mirrors all methods of `DieOnce` without
/// the suffix `_once`. These methods must behave in the same way. For example an implementation
/// of `Die` must produce the same value with its methods `roll` and `roll_once` if they are called
/// with the same `Fate`.
pub trait Die<T>: DieOnce<T> {
    /// Generates a preudorandom value using.
    ///
    /// The `Fate` is the only source of the randomness. Besides that, the generation is
    /// derterministic.
    fn roll(&self, fate: &mut Fate) -> T;

    /// Creates a new `Die` by mapping the generated values of `self`.
    ///
    /// The function `f` will be applied to the generated values of `self`. These function results
    /// are the generated values of the new `Die`.
    fn map<U, F>(self, f: F) -> MapDie<T, U, Self, F>
    where
        Self: Sized,
        F: Fn(T) -> U,
    {
        MapDie::new(self, f)
    }

    /// Creates a new `Die` whose values are generated by the generated `Die`s of `self`.
    fn flatten<U>(self) -> FlattenDie<U, T, Self>
    where
        Self: Sized,
        T: DieOnce<U>,
    {
        FlattenDie::new(self)
    }

    /// Creates a new `Die` similiar to `Die::map`, except that the mapping produces `Die`s.
    ///
    /// The function `f` will be applied to the generated values of `self`. These function results
    /// are `Die`s that generates the values for the new `Die`.
    ///
    /// It is semanticly equivalent to `self.map(f).flatten()`.
    fn flat_map<U, UD, F>(self, f: F) -> FlatMapDie<T, U, Self, UD, F>
    where
        Self: Sized,
        UD: DieOnce<U>,
        F: Fn(T) -> UD,
    {
        FlatMapDie::new(self, f)
    }

    /// Puts `self` behind a `Box` pointer.
    fn boxed<'a>(self) -> BoxedDie<'a, T>
    where
        Self: Sized + 'a,
    {
        BoxedDie::new(self)
    }

    /// Puts `self` behind an `Rc` pointer.
    fn rc<'a>(self) -> RcDie<'a, T>
    where
        Self: Sized + 'a,
    {
        RcDie::new(self)
    }

    /// Puts `self` behind an `Arc` pointer.
    fn arc(self) -> ArcDie<T>
    where
        Self: Sized + 'static,
    {
        ArcDie::new(self)
    }

    /// Calls `Die::roll` with random seed and default parameters. Useful for debugging the
    /// generator.
    fn sample(&self) -> T {
        let mut prng = Prng::random();
        let lim = Limit::default();
        let mut fate = Fate::new(&mut prng, lim);

        self.roll(&mut fate)
    }
}
